{
  "version": 3,
  "sources": [
    "/home/zero/Projects/store-kit/contracts/lodash.py"
  ],
  "mappings": "AAMA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA6CK;;AAAA;AAAA;AAAA;;AAAA;AA7CL;;;AAAA;AA6CK;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;;;AAAA;;;AAAA;;;AAqCK;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA7BL;;;AAAA;;;AA6BK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAAA;;;AAsBK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;;AAAA;;;AAAA;;;AAAA;;;AAgBK;;;AAAA;;AAhBL;;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAWK;;AAAA;AAAA;;;AAAA;;AAEU;;AAAc;;AAAd;AAAP;AACO;AAAP;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACe;AAAR;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;AAAJ;AACe;AAAR;;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;AAAP;;AAER;;;AAGe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACe;AAAR;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACoB;AAAA;AAAA;AAAA;;AAAA;AAApB;;AAAA;;AAAA;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;AAAJ;AACA;AAAoB;;AAA6C;;;;;;;;;;AAAjE;;;AAA4G;;;AAA5G;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0xa8617ccd 0xc0850aee 0x8e8900b9 0x53013bdb 0x4eff516d // method \"set(string,string)void\", method \"get(string)string\", method \"remove(string)void\", method \"concat(string,string)void\", method \"reclaim(uint64)void\""
    },
    "32": {
      "op": "txna ApplicationArgs 0"
    },
    "35": {
      "op": "match main_set_route@5 main_get_route@6 main_remove_route@7 main_concat_route@8 main_reclaim_route@9"
    },
    "47": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "48": {
      "op": "return"
    },
    "49": {
      "block": "main_reclaim_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "52": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "53": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "55": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "56": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "59": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "60": {
      "callsub": "contracts.lodash.Lodash.reclaim",
      "op": "callsub reclaim",
      "stack_out": []
    },
    "63": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "64": {
      "op": "return"
    },
    "65": {
      "block": "main_concat_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "67": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "68": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "69": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "71": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "72": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "75": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "78": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "81": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "84": {
      "callsub": "contracts.lodash.Lodash.concat",
      "op": "callsub concat",
      "stack_out": []
    },
    "87": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "88": {
      "op": "return"
    },
    "89": {
      "block": "main_remove_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "91": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "92": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "93": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "95": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "96": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "99": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "102": {
      "callsub": "contracts.lodash.Lodash.remove",
      "op": "callsub remove",
      "stack_out": []
    },
    "105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "106": {
      "op": "return"
    },
    "107": {
      "block": "main_get_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "109": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "110": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "111": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "113": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "114": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "117": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "120": {
      "callsub": "contracts.lodash.Lodash.get",
      "op": "callsub get",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "123": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "124": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "125": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "126": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "129": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "131": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "139": {
      "op": "log",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "141": {
      "op": "return"
    },
    "142": {
      "block": "main_set_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "144": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "145": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "149": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "152": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "155": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "158": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "161": {
      "callsub": "contracts.lodash.Lodash.set",
      "op": "callsub set",
      "stack_out": []
    },
    "164": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "165": {
      "op": "return"
    },
    "166": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "pushint 5 // 5"
    },
    "168": {
      "op": "intc_1 // 0"
    },
    "169": {
      "op": "txn OnCompletion",
      "defined_out": [
        "0",
        "5",
        "tmp%37#0"
      ],
      "stack_out": [
        "5",
        "0",
        "tmp%37#0"
      ]
    },
    "171": {
      "op": "match main_on_delete@11 main___algopy_default_create@12",
      "stack_out": []
    },
    "177": {
      "op": "b main_after_if_else@13"
    },
    "180": {
      "block": "main___algopy_default_create@12",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "182": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "183": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "184": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "185": {
      "op": "return"
    },
    "186": {
      "block": "main_on_delete@11",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "188": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "189": {
      "callsub": "contracts.lodash.Lodash.on_delete",
      "op": "callsub on_delete"
    },
    "192": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "193": {
      "op": "return"
    },
    "194": {
      "subroutine": "contracts.lodash.Lodash.on_delete",
      "params": {},
      "block": "on_delete",
      "stack_in": [],
      "op": "txn Sender"
    },
    "196": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "199": {
      "op": "assert",
      "stack_out": []
    },
    "200": {
      "op": "intc_2 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "201": {
      "op": "assert",
      "stack_out": []
    },
    "202": {
      "retsub": true,
      "op": "retsub"
    },
    "203": {
      "subroutine": "contracts.lodash.Lodash.set",
      "params": {
        "path#0": "bytes",
        "value#0": "bytes"
      },
      "block": "set",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "206": {
      "op": "txn Sender"
    },
    "208": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "210": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "211": {
      "op": "assert",
      "stack_out": []
    },
    "212": {
      "op": "pushbytes 0x53657474696e67207b706174687d20746f207b76616c75657d",
      "defined_out": [
        "0x53657474696e67207b706174687d20746f207b76616c75657d"
      ],
      "stack_out": [
        "0x53657474696e67207b706174687d20746f207b76616c75657d"
      ]
    },
    "239": {
      "op": "log",
      "stack_out": []
    },
    "240": {
      "op": "bytec_0 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "241": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "244": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "245": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "{box_del}"
      ]
    },
    "246": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "247": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%3#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "value#0 (copy)"
      ]
    },
    "249": {
      "op": "box_put",
      "stack_out": []
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    },
    "251": {
      "subroutine": "contracts.lodash.Lodash.get",
      "params": {
        "path#0": "bytes"
      },
      "block": "get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "254": {
      "op": "txn Sender"
    },
    "256": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "258": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "259": {
      "op": "assert",
      "stack_out": []
    },
    "260": {
      "op": "pushbytes 0x47657474696e67207b706174687d20746f207b76616c75657d",
      "defined_out": [
        "0x47657474696e67207b706174687d20746f207b76616c75657d"
      ],
      "stack_out": [
        "0x47657474696e67207b706174687d20746f207b76616c75657d"
      ]
    },
    "287": {
      "op": "log",
      "stack_out": []
    },
    "288": {
      "op": "bytec_0 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "289": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "292": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "293": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "294": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "296": {
      "op": "assert",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "297": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "298": {
      "error": "check self.public entry exists",
      "op": "assert // check self.public entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "299": {
      "retsub": true,
      "op": "retsub"
    },
    "300": {
      "subroutine": "contracts.lodash.Lodash.remove",
      "params": {
        "path#0": "bytes"
      },
      "block": "remove",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "303": {
      "op": "txn Sender"
    },
    "305": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "308": {
      "op": "assert",
      "stack_out": []
    },
    "309": {
      "op": "pushbytes 0x52656d6f76696e67207b706174687d",
      "defined_out": [
        "0x52656d6f76696e67207b706174687d"
      ],
      "stack_out": [
        "0x52656d6f76696e67207b706174687d"
      ]
    },
    "326": {
      "op": "log",
      "stack_out": []
    },
    "327": {
      "op": "bytec_0 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "328": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "331": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "332": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "334": {
      "op": "assert",
      "stack_out": []
    },
    "335": {
      "op": "frame_dig -1",
      "stack_out": [
        "path#0 (copy)"
      ]
    },
    "337": {
      "op": "box_del",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "338": {
      "op": "assert",
      "stack_out": []
    },
    "339": {
      "retsub": true,
      "op": "retsub"
    },
    "340": {
      "subroutine": "contracts.lodash.Lodash.concat",
      "params": {
        "path#0": "bytes",
        "value#0": "bytes"
      },
      "block": "concat",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "343": {
      "op": "txn Sender"
    },
    "345": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "347": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "348": {
      "op": "assert",
      "stack_out": []
    },
    "349": {
      "op": "pushbytes 0x416464696e67207b76616c75657d20746f207b706174687d",
      "defined_out": [
        "0x416464696e67207b76616c75657d20746f207b706174687d"
      ],
      "stack_out": [
        "0x416464696e67207b76616c75657d20746f207b706174687d"
      ]
    },
    "375": {
      "op": "log",
      "stack_out": []
    },
    "376": {
      "op": "bytec_0 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "377": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "379": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "380": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "381": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "382": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "384": {
      "op": "assert",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "385": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "386": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "387": {
      "error": "check self.public entry exists",
      "op": "assert // check self.public entry exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "388": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "value#0 (copy)"
      ]
    },
    "390": {
      "op": "concat",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "391": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "393": {
      "op": "box_del",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0",
        "{box_del}"
      ]
    },
    "394": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "395": {
      "op": "box_put",
      "stack_out": []
    },
    "396": {
      "retsub": true,
      "op": "retsub"
    },
    "397": {
      "subroutine": "contracts.lodash.Lodash.reclaim",
      "params": {
        "amount#0": "uint64"
      },
      "block": "reclaim",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "400": {
      "op": "txn Sender"
    },
    "402": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "404": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "405": {
      "op": "assert",
      "stack_out": []
    },
    "406": {
      "op": "pushbytes 0x5265636c61696d696e67204d4252",
      "defined_out": [
        "0x5265636c61696d696e67204d4252"
      ],
      "stack_out": [
        "0x5265636c61696d696e67204d4252"
      ]
    },
    "422": {
      "op": "log",
      "stack_out": []
    },
    "423": {
      "op": "itxn_begin"
    },
    "424": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "426": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "428": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "430": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "432": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "434": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "437": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "439": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "440": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "442": {
      "op": "itxn_submit"
    },
    "443": {
      "retsub": true,
      "op": "retsub"
    }
  }
}