{
  "version": 3,
  "sources": [
    "/home/zero/Projects/store-kit/contracts/lodash.py"
  ],
  "mappings": ";;;;;AAgBkD;AAAf;AAA3B;AATR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAuDK;;AAAA;AAAA;AAAA;;AAAA;AAvDL;;;AAAA;AAuDK;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA/CL;;;AAAA;;;AAAA;;;AAAA;;;AA+CK;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAvCL;;;AAAA;;;AAuCK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;;AAAA;;;AAgCK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;;;AAAA;;;AAAA;;;AAyBK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAAA;;;AAkBK;;;AAAA;;AAlBL;;AAAA;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;AAaK;;AAAA;AAAA;;;AAAA;;AAEU;;AAAc;;AAAd;AAAP;AACO;AAAP;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;;;;;;AAAA;;AAAA;AACqB;AAAA;AAAA;AAAA;AAAqB;AAArB;AAArB;AAAA;AAAA;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACqB;AAAA;AAAA;AAAA;AAAqB;AAArB;AAArB;AAAA;AAAA;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACe;AAAR;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;AAAJ;AACe;AAAR;;AAAA;AAAA;AAAA;;AAAP;AAEO;;AAAA;AAAP;;AAER;;;AAGe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACe;AAAR;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACoB;AAAA;AAAA;AAAA;;AAAA;AAApB;;AAAA;;AAAA;;AAER;;;AAEe;;AAAc;;AAAd;AAAP;AACI;;;;;;;;;;;;;;;;AAAJ;AACA;AAAoB;;AAA6C;;;;;;;;;;AAAjE;;;AAA4G;;;AAA5G;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "5": {
      "op": "bytec_0 // \"count\""
    },
    "6": {
      "op": "intc_1 // 0"
    },
    "7": {
      "op": "app_global_put"
    },
    "8": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "10": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0xf27452b2 0xa8617ccd 0xc0850aee 0x8e8900b9 0x53013bdb 0x4eff516d // method \"assign(string)void\", method \"set(string,string)void\", method \"get(string)string\", method \"remove(string)void\", method \"concat(string,string)void\", method \"reclaim(uint64)void\""
    },
    "45": {
      "op": "txna ApplicationArgs 0"
    },
    "48": {
      "op": "match main_assign_route@5 main_set_route@6 main_get_route@7 main_remove_route@8 main_concat_route@9 main_reclaim_route@10"
    },
    "62": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "return"
    },
    "64": {
      "block": "main_reclaim_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "66": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "67": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "70": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "71": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "74": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "75": {
      "callsub": "contracts.lodash.Lodash.reclaim",
      "op": "callsub reclaim",
      "stack_out": []
    },
    "78": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "return"
    },
    "80": {
      "block": "main_concat_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "83": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "86": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "87": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "90": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "93": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "96": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%37#0"
      ]
    },
    "99": {
      "callsub": "contracts.lodash.Lodash.concat",
      "op": "callsub concat",
      "stack_out": []
    },
    "102": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "103": {
      "op": "return"
    },
    "104": {
      "block": "main_remove_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "106": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "107": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "110": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "111": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "114": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "117": {
      "callsub": "contracts.lodash.Lodash.remove",
      "op": "callsub remove",
      "stack_out": []
    },
    "120": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "121": {
      "op": "return"
    },
    "122": {
      "block": "main_get_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "124": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "125": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "126": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "128": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "129": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "132": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "135": {
      "callsub": "contracts.lodash.Lodash.get",
      "op": "callsub get",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "138": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "139": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "140": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "141": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "144": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "146": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "152": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "153": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "154": {
      "op": "log",
      "stack_out": []
    },
    "155": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "156": {
      "op": "return"
    },
    "157": {
      "block": "main_set_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "159": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "160": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "161": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "163": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "164": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "167": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "170": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "173": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "176": {
      "callsub": "contracts.lodash.Lodash.set",
      "op": "callsub set",
      "stack_out": []
    },
    "179": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "return"
    },
    "181": {
      "block": "main_assign_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "183": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "187": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "188": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "191": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "194": {
      "callsub": "contracts.lodash.Lodash.assign",
      "op": "callsub assign",
      "stack_out": []
    },
    "197": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return"
    },
    "199": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "pushint 5 // 5"
    },
    "201": {
      "op": "intc_1 // 0"
    },
    "202": {
      "op": "txn OnCompletion",
      "defined_out": [
        "0",
        "5",
        "tmp%43#0"
      ],
      "stack_out": [
        "5",
        "0",
        "tmp%43#0"
      ]
    },
    "204": {
      "op": "match main_on_delete@12 main___algopy_default_create@13",
      "stack_out": []
    },
    "210": {
      "op": "b main_after_if_else@14"
    },
    "213": {
      "block": "main___algopy_default_create@13",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "215": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "216": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "217": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "218": {
      "op": "return"
    },
    "219": {
      "block": "main_on_delete@12",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "221": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "222": {
      "callsub": "contracts.lodash.Lodash.on_delete",
      "op": "callsub on_delete"
    },
    "225": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "226": {
      "op": "return"
    },
    "227": {
      "subroutine": "contracts.lodash.Lodash.on_delete",
      "params": {},
      "block": "on_delete",
      "stack_in": [],
      "op": "txn Sender"
    },
    "229": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "231": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "232": {
      "op": "assert",
      "stack_out": []
    },
    "233": {
      "op": "intc_2 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "234": {
      "op": "assert",
      "stack_out": []
    },
    "235": {
      "retsub": true,
      "op": "retsub"
    },
    "236": {
      "subroutine": "contracts.lodash.Lodash.assign",
      "params": {
        "value#0": "bytes"
      },
      "block": "assign",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "239": {
      "op": "txn Sender"
    },
    "241": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "243": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "244": {
      "op": "assert",
      "stack_out": []
    },
    "245": {
      "op": "pushbytes 0x53657474696e67207479706520746f207b76616c75657d",
      "defined_out": [
        "0x53657474696e67207479706520746f207b76616c75657d"
      ],
      "stack_out": [
        "0x53657474696e67207479706520746f207b76616c75657d"
      ]
    },
    "270": {
      "op": "log",
      "stack_out": []
    },
    "271": {
      "op": "pushbytes \"type\"",
      "defined_out": [
        "\"type\""
      ],
      "stack_out": [
        "\"type\""
      ]
    },
    "277": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"type\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"type\"",
        "value#0 (copy)"
      ]
    },
    "279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "280": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "281": {
      "op": "bytec_0 // \"count\"",
      "defined_out": [
        "\"count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"count\""
      ]
    },
    "282": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "283": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "284": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "285": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "286": {
      "op": "bytec_0 // \"count\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"count\""
      ]
    },
    "287": {
      "op": "swap",
      "stack_out": [
        "\"count\"",
        "new_state_value%0#0"
      ]
    },
    "288": {
      "op": "app_global_put",
      "stack_out": []
    },
    "289": {
      "retsub": true,
      "op": "retsub"
    },
    "290": {
      "subroutine": "contracts.lodash.Lodash.set",
      "params": {
        "path#0": "bytes",
        "value#0": "bytes"
      },
      "block": "set",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "293": {
      "op": "txn Sender"
    },
    "295": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "297": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "298": {
      "op": "assert",
      "stack_out": []
    },
    "299": {
      "op": "pushbytes 0x53657474696e67207b706174687d20746f207b76616c75657d",
      "defined_out": [
        "0x53657474696e67207b706174687d20746f207b76616c75657d"
      ],
      "stack_out": [
        "0x53657474696e67207b706174687d20746f207b76616c75657d"
      ]
    },
    "326": {
      "op": "log",
      "stack_out": []
    },
    "327": {
      "op": "bytec_1 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "328": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "331": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "332": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "{box_del}"
      ]
    },
    "333": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "334": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%3#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "value#0 (copy)"
      ]
    },
    "336": {
      "op": "box_put",
      "stack_out": []
    },
    "337": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "338": {
      "op": "bytec_0 // \"count\"",
      "defined_out": [
        "\"count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"count\""
      ]
    },
    "339": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "340": {
      "error": "check self.counter exists",
      "op": "assert // check self.counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "341": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "342": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "343": {
      "op": "bytec_0 // \"count\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"count\""
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "\"count\"",
        "new_state_value%0#0"
      ]
    },
    "345": {
      "op": "app_global_put",
      "stack_out": []
    },
    "346": {
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "subroutine": "contracts.lodash.Lodash.get",
      "params": {
        "path#0": "bytes"
      },
      "block": "get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "350": {
      "op": "txn Sender"
    },
    "352": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "354": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "355": {
      "op": "assert",
      "stack_out": []
    },
    "356": {
      "op": "pushbytes 0x47657474696e67207b706174687d20746f207b76616c75657d",
      "defined_out": [
        "0x47657474696e67207b706174687d20746f207b76616c75657d"
      ],
      "stack_out": [
        "0x47657474696e67207b706174687d20746f207b76616c75657d"
      ]
    },
    "383": {
      "op": "log",
      "stack_out": []
    },
    "384": {
      "op": "bytec_1 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "385": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "387": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "388": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "389": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "390": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "392": {
      "op": "assert",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "393": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "394": {
      "error": "check self.public entry exists",
      "op": "assert // check self.public entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "395": {
      "retsub": true,
      "op": "retsub"
    },
    "396": {
      "subroutine": "contracts.lodash.Lodash.remove",
      "params": {
        "path#0": "bytes"
      },
      "block": "remove",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "399": {
      "op": "txn Sender"
    },
    "401": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "403": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "404": {
      "op": "assert",
      "stack_out": []
    },
    "405": {
      "op": "pushbytes 0x52656d6f76696e67207b706174687d",
      "defined_out": [
        "0x52656d6f76696e67207b706174687d"
      ],
      "stack_out": [
        "0x52656d6f76696e67207b706174687d"
      ]
    },
    "422": {
      "op": "log",
      "stack_out": []
    },
    "423": {
      "op": "bytec_1 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "424": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "426": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "427": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "428": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "430": {
      "op": "assert",
      "stack_out": []
    },
    "431": {
      "op": "frame_dig -1",
      "stack_out": [
        "path#0 (copy)"
      ]
    },
    "433": {
      "op": "box_del",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "434": {
      "op": "assert",
      "stack_out": []
    },
    "435": {
      "retsub": true,
      "op": "retsub"
    },
    "436": {
      "subroutine": "contracts.lodash.Lodash.concat",
      "params": {
        "path#0": "bytes",
        "value#0": "bytes"
      },
      "block": "concat",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "439": {
      "op": "txn Sender"
    },
    "441": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "443": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "444": {
      "op": "assert",
      "stack_out": []
    },
    "445": {
      "op": "pushbytes 0x416464696e67207b76616c75657d20746f207b706174687d",
      "defined_out": [
        "0x416464696e67207b76616c75657d20746f207b706174687d"
      ],
      "stack_out": [
        "0x416464696e67207b76616c75657d20746f207b706174687d"
      ]
    },
    "471": {
      "op": "log",
      "stack_out": []
    },
    "472": {
      "op": "bytec_1 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "473": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "475": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "476": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "477": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "478": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "480": {
      "op": "assert",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "481": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "482": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "483": {
      "error": "check self.public entry exists",
      "op": "assert // check self.public entry exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "484": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%3#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "value#0 (copy)"
      ]
    },
    "486": {
      "op": "concat",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "487": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "489": {
      "op": "box_del",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0",
        "{box_del}"
      ]
    },
    "490": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "491": {
      "op": "box_put",
      "stack_out": []
    },
    "492": {
      "retsub": true,
      "op": "retsub"
    },
    "493": {
      "subroutine": "contracts.lodash.Lodash.reclaim",
      "params": {
        "amount#0": "uint64"
      },
      "block": "reclaim",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "496": {
      "op": "txn Sender"
    },
    "498": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "500": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "501": {
      "op": "assert",
      "stack_out": []
    },
    "502": {
      "op": "pushbytes 0x5265636c61696d696e67204d4252",
      "defined_out": [
        "0x5265636c61696d696e67204d4252"
      ],
      "stack_out": [
        "0x5265636c61696d696e67204d4252"
      ]
    },
    "518": {
      "op": "log",
      "stack_out": []
    },
    "519": {
      "op": "itxn_begin"
    },
    "520": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "522": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "524": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "526": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "528": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "530": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "532": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "533": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "535": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "536": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "538": {
      "op": "itxn_submit"
    },
    "539": {
      "retsub": true,
      "op": "retsub"
    }
  }
}