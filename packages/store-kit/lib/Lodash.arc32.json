{
    "hints": {
        "set(string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "concat(string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reclaim(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Lodash",
        "desc": "Object Storage on Algorand\n\n    Attributes\n    ----------\n    public : BoxMap\n        Boxes that store the object\n    ",
        "methods": [
            {
                "name": "set",
                "args": [
                    {
                        "type": "string",
                        "name": "path"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get",
                "args": [
                    {
                        "type": "string",
                        "name": "path"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "remove",
                "args": [
                    {
                        "type": "string",
                        "name": "path"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "concat",
                "args": [
                    {
                        "type": "string",
                        "name": "path"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Concatenates a value to an existing box."
            },
            {
                "name": "reclaim",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
}