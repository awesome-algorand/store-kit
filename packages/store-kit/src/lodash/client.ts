/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Lodash","desc":"Object Storage on Algorand\n\n    Attributes\n    ----------\n    public : BoxMap\n        Boxes that store the object\n    ","structs":{},"methods":[{"name":"assign","args":[{"name":"value","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set","args":[{"name":"path","type":"string"},{"name":"value","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get","args":[{"name":"path","type":"string"}],"returns":{"type":"string"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"remove","args":[{"name":"path","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"concat","desc":"Concatenates a value to an existing box.","args":[{"name":"path","type":"string"},{"name":"value","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reclaim","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"counter":{"key":"Y291bnQ=","keyType":"AVMString","valueType":"AVMUint64","desc":"Number of mutations"},"type":{"key":"dHlwZQ==","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":["DeleteApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Lodash contract
 */
export type LodashArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'assign(string)void': {
      value: string
    }
    'set(string,string)void': {
      path: string
      value: string
    }
    'get(string)string': {
      path: string
    }
    'remove(string)void': {
      path: string
    }
    'concat(string,string)void': {
      path: string
      value: string
    }
    'reclaim(uint64)void': {
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'assign(string)void': [value: string]
    'set(string,string)void': [path: string, value: string]
    'get(string)string': [path: string]
    'remove(string)void': [path: string]
    'concat(string,string)void': [path: string, value: string]
    'reclaim(uint64)void': [amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type LodashReturns = {
  'assign(string)void': void
  'set(string,string)void': void
  'get(string)string': string
  'remove(string)void': void
  'concat(string,string)void': void
  'reclaim(uint64)void': void
}

/**
 * Defines the types of available calls and state of the Lodash smart contract.
 */
export type LodashTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'assign(string)void' | 'assign', {
      argsObj: LodashArgs['obj']['assign(string)void']
      argsTuple: LodashArgs['tuple']['assign(string)void']
      returns: LodashReturns['assign(string)void']
    }>
    & Record<'set(string,string)void' | 'set', {
      argsObj: LodashArgs['obj']['set(string,string)void']
      argsTuple: LodashArgs['tuple']['set(string,string)void']
      returns: LodashReturns['set(string,string)void']
    }>
    & Record<'get(string)string' | 'get', {
      argsObj: LodashArgs['obj']['get(string)string']
      argsTuple: LodashArgs['tuple']['get(string)string']
      returns: LodashReturns['get(string)string']
    }>
    & Record<'remove(string)void' | 'remove', {
      argsObj: LodashArgs['obj']['remove(string)void']
      argsTuple: LodashArgs['tuple']['remove(string)void']
      returns: LodashReturns['remove(string)void']
    }>
    & Record<'concat(string,string)void' | 'concat', {
      argsObj: LodashArgs['obj']['concat(string,string)void']
      argsTuple: LodashArgs['tuple']['concat(string,string)void']
      returns: LodashReturns['concat(string,string)void']
    }>
    & Record<'reclaim(uint64)void' | 'reclaim', {
      argsObj: LodashArgs['obj']['reclaim(uint64)void']
      argsTuple: LodashArgs['tuple']['reclaim(uint64)void']
      returns: LodashReturns['reclaim(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Number of mutations
         */
        counter: bigint
        type: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LodashSignatures = keyof LodashTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LodashNonVoidMethodSignatures = keyof LodashTypes['methods'] extends infer T ? T extends keyof LodashTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Lodash smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LodashSignatures> = LodashTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Lodash smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LodashSignatures> = LodashTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LodashTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LodashCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type LodashDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type LodashDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LodashCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: LodashDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Lodash smart contract
 */
export abstract class LodashParamsFactory {
  /**
   * Constructs a no op call for the assign(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assign(params: CallParams<LodashArgs['obj']['assign(string)void'] | LodashArgs['tuple']['assign(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assign(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the set(string,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static set(params: CallParams<LodashArgs['obj']['set(string,string)void'] | LodashArgs['tuple']['set(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.path, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the get(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static get(params: CallParams<LodashArgs['obj']['get(string)string'] | LodashArgs['tuple']['get(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.path],
    }
  }
  /**
   * Constructs a no op call for the remove(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static remove(params: CallParams<LodashArgs['obj']['remove(string)void'] | LodashArgs['tuple']['remove(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.path],
    }
  }
  /**
   * Constructs a no op call for the concat(string,string)void ABI method
   *
   * Concatenates a value to an existing box.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static concat(params: CallParams<LodashArgs['obj']['concat(string,string)void'] | LodashArgs['tuple']['concat(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'concat(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.path, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the reclaim(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reclaim(params: CallParams<LodashArgs['obj']['reclaim(uint64)void'] | LodashArgs['tuple']['reclaim(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reclaim(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Lodash smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LodashFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LodashFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LodashClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LodashClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Lodash smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LodashDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LodashClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Lodash smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Lodash smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Lodash smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Lodash smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LodashClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Lodash smart contract
 */
export class LodashClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LodashClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Lodash app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LodashClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LodashNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LodashClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LodashClient> {
    return new LodashClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LodashClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LodashClient> {
    return new LodashClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Lodash smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Lodash smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Lodash smart contract using the `assign(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assign: (params: CallParams<LodashArgs['obj']['assign(string)void'] | LodashArgs['tuple']['assign(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LodashParamsFactory.assign(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `set(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    set: (params: CallParams<LodashArgs['obj']['set(string,string)void'] | LodashArgs['tuple']['set(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LodashParamsFactory.set(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `get(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    get: (params: CallParams<LodashArgs['obj']['get(string)string'] | LodashArgs['tuple']['get(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LodashParamsFactory.get(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `remove(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    remove: (params: CallParams<LodashArgs['obj']['remove(string)void'] | LodashArgs['tuple']['remove(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LodashParamsFactory.remove(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `concat(string,string)void` ABI method.
     *
     * Concatenates a value to an existing box.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    concat: (params: CallParams<LodashArgs['obj']['concat(string,string)void'] | LodashArgs['tuple']['concat(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LodashParamsFactory.concat(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `reclaim(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reclaim: (params: CallParams<LodashArgs['obj']['reclaim(uint64)void'] | LodashArgs['tuple']['reclaim(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LodashParamsFactory.reclaim(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Lodash smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Lodash smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Lodash smart contract using the `assign(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assign: (params: CallParams<LodashArgs['obj']['assign(string)void'] | LodashArgs['tuple']['assign(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LodashParamsFactory.assign(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `set(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    set: (params: CallParams<LodashArgs['obj']['set(string,string)void'] | LodashArgs['tuple']['set(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LodashParamsFactory.set(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `get(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    get: (params: CallParams<LodashArgs['obj']['get(string)string'] | LodashArgs['tuple']['get(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LodashParamsFactory.get(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `remove(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    remove: (params: CallParams<LodashArgs['obj']['remove(string)void'] | LodashArgs['tuple']['remove(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LodashParamsFactory.remove(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `concat(string,string)void` ABI method.
     *
     * Concatenates a value to an existing box.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    concat: (params: CallParams<LodashArgs['obj']['concat(string,string)void'] | LodashArgs['tuple']['concat(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LodashParamsFactory.concat(params))
    },

    /**
     * Makes a call to the Lodash smart contract using the `reclaim(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reclaim: (params: CallParams<LodashArgs['obj']['reclaim(uint64)void'] | LodashArgs['tuple']['reclaim(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LodashParamsFactory.reclaim(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Lodash smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Lodash smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Lodash smart contract using the `assign(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assign: async (params: CallParams<LodashArgs['obj']['assign(string)void'] | LodashArgs['tuple']['assign(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LodashParamsFactory.assign(params))
      return {...result, return: result.return as unknown as (undefined | LodashReturns['assign(string)void'])}
    },

    /**
     * Makes a call to the Lodash smart contract using the `set(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    set: async (params: CallParams<LodashArgs['obj']['set(string,string)void'] | LodashArgs['tuple']['set(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LodashParamsFactory.set(params))
      return {...result, return: result.return as unknown as (undefined | LodashReturns['set(string,string)void'])}
    },

    /**
     * Makes a call to the Lodash smart contract using the `get(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    get: async (params: CallParams<LodashArgs['obj']['get(string)string'] | LodashArgs['tuple']['get(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LodashParamsFactory.get(params))
      return {...result, return: result.return as unknown as (undefined | LodashReturns['get(string)string'])}
    },

    /**
     * Makes a call to the Lodash smart contract using the `remove(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    remove: async (params: CallParams<LodashArgs['obj']['remove(string)void'] | LodashArgs['tuple']['remove(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LodashParamsFactory.remove(params))
      return {...result, return: result.return as unknown as (undefined | LodashReturns['remove(string)void'])}
    },

    /**
     * Makes a call to the Lodash smart contract using the `concat(string,string)void` ABI method.
     *
     * Concatenates a value to an existing box.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    concat: async (params: CallParams<LodashArgs['obj']['concat(string,string)void'] | LodashArgs['tuple']['concat(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LodashParamsFactory.concat(params))
      return {...result, return: result.return as unknown as (undefined | LodashReturns['concat(string,string)void'])}
    },

    /**
     * Makes a call to the Lodash smart contract using the `reclaim(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reclaim: async (params: CallParams<LodashArgs['obj']['reclaim(uint64)void'] | LodashArgs['tuple']['reclaim(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LodashParamsFactory.reclaim(params))
      return {...result, return: result.return as unknown as (undefined | LodashReturns['reclaim(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LodashClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Lodash app
   */
  state = {
    /**
     * Methods to access global state for the current Lodash app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          counter: result.counter,
          type: new BinaryStateValue(result.type),
        }
      },
      /**
       * Get the current value of the counter key in global state
       */
      counter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("counter")) as bigint | undefined },
      /**
       * Get the current value of the type key in global state
       */
      type: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("type")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): LodashComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a assign(string)void method call against the Lodash contract
       */
      assign(params: CallParams<LodashArgs['obj']['assign(string)void'] | LodashArgs['tuple']['assign(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assign(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set(string,string)void method call against the Lodash contract
       */
      set(params: CallParams<LodashArgs['obj']['set(string,string)void'] | LodashArgs['tuple']['set(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.set(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get(string)string method call against the Lodash contract
       */
      get(params: CallParams<LodashArgs['obj']['get(string)string'] | LodashArgs['tuple']['get(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.get(params)))
        resultMappers.push((v) => client.decodeReturnValue('get(string)string', v))
        return this
      },
      /**
       * Add a remove(string)void method call against the Lodash contract
       */
      remove(params: CallParams<LodashArgs['obj']['remove(string)void'] | LodashArgs['tuple']['remove(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.remove(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a concat(string,string)void method call against the Lodash contract
       */
      concat(params: CallParams<LodashArgs['obj']['concat(string,string)void'] | LodashArgs['tuple']['concat(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.concat(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reclaim(uint64)void method call against the Lodash contract
       */
      reclaim(params: CallParams<LodashArgs['obj']['reclaim(uint64)void'] | LodashArgs['tuple']['reclaim(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reclaim(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Lodash contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LodashComposer
  }
}
export type LodashComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the assign(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assign(params?: CallParams<LodashArgs['obj']['assign(string)void'] | LodashArgs['tuple']['assign(string)void']>): LodashComposer<[...TReturns, LodashReturns['assign(string)void'] | undefined]>

  /**
   * Calls the set(string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  set(params?: CallParams<LodashArgs['obj']['set(string,string)void'] | LodashArgs['tuple']['set(string,string)void']>): LodashComposer<[...TReturns, LodashReturns['set(string,string)void'] | undefined]>

  /**
   * Calls the get(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  get(params?: CallParams<LodashArgs['obj']['get(string)string'] | LodashArgs['tuple']['get(string)string']>): LodashComposer<[...TReturns, LodashReturns['get(string)string'] | undefined]>

  /**
   * Calls the remove(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  remove(params?: CallParams<LodashArgs['obj']['remove(string)void'] | LodashArgs['tuple']['remove(string)void']>): LodashComposer<[...TReturns, LodashReturns['remove(string)void'] | undefined]>

  /**
   * Calls the concat(string,string)void ABI method.
   *
   * Concatenates a value to an existing box.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  concat(params?: CallParams<LodashArgs['obj']['concat(string,string)void'] | LodashArgs['tuple']['concat(string,string)void']>): LodashComposer<[...TReturns, LodashReturns['concat(string,string)void'] | undefined]>

  /**
   * Calls the reclaim(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reclaim(params?: CallParams<LodashArgs['obj']['reclaim(uint64)void'] | LodashArgs['tuple']['reclaim(uint64)void']>): LodashComposer<[...TReturns, LodashReturns['reclaim(uint64)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Lodash smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): LodashComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Lodash smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LodashComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LodashComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LodashComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LodashComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LodashComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LodashComposerResults<TReturns>>
}
export type LodashComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

