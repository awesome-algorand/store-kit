{
  "version": 3,
  "sources": [
    "/home/zero/Projects/awesome-algorand/store-kit/contracts/lodash.py"
  ],
  "mappings": ";;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AASK;;AAAA;AAAA;AAAA;;AAAA;AATL;;;AAAA;;;AASK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAJL;;;AAAA;;;AAAA;;;AAAA;;;AAIK;;;AAAA;;;AAJL;;AAAA;;;;;;;;;;AAIA;;;AAEY;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;AAEY;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACe;AAAR;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "contracts.lodash.Lodash.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x6f726d5f"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "10": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0xa8617ccd 0xc0850aee // method \"set(string,string)void\", method \"get(string)string\""
    },
    "25": {
      "op": "txna ApplicationArgs 0"
    },
    "28": {
      "op": "match main_set_route@5 main_get_route@6"
    },
    "34": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "return"
    },
    "37": {
      "block": "main_get_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "40": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "41": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "43": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "44": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "47": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "50": {
      "callsub": "contracts.lodash.Lodash.get",
      "op": "callsub get",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "53": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "54": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "55": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "56": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "59": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "60": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "61": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "67": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "68": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "69": {
      "op": "log",
      "stack_out": []
    },
    "70": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "72": {
      "op": "return"
    },
    "73": {
      "block": "main_set_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "75": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "76": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "77": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "79": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "80": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "83": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "86": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "89": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "92": {
      "callsub": "contracts.lodash.Lodash.set",
      "op": "callsub set",
      "stack_out": []
    },
    "95": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "97": {
      "op": "return"
    },
    "98": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "100": {
      "op": "bnz main_after_if_else@9",
      "stack_out": []
    },
    "103": {
      "op": "txn ApplicationID"
    },
    "105": {
      "op": "!"
    },
    "106": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "107": {
      "op": "pushint 1 // 1"
    },
    "109": {
      "op": "return"
    },
    "110": {
      "subroutine": "contracts.lodash.Lodash.set",
      "params": {
        "path#0": "bytes",
        "value#0": "bytes"
      },
      "block": "set",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "113": {
      "op": "pushbytes 0x53657474696e67207b706174687d20746f207b76616c75657d",
      "defined_out": [
        "0x53657474696e67207b706174687d20746f207b76616c75657d"
      ],
      "stack_out": [
        "0x53657474696e67207b706174687d20746f207b76616c75657d"
      ]
    },
    "140": {
      "op": "log",
      "stack_out": []
    },
    "141": {
      "op": "bytec_0 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "142": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "146": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "147": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ]
    },
    "150": {
      "op": "box_put",
      "stack_out": []
    },
    "151": {
      "retsub": true,
      "op": "retsub"
    },
    "152": {
      "subroutine": "contracts.lodash.Lodash.get",
      "params": {
        "path#0": "bytes"
      },
      "block": "get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "155": {
      "op": "pushbytes 0x47657474696e67207b706174687d20746f207b76616c75657d",
      "defined_out": [
        "0x47657474696e67207b706174687d20746f207b76616c75657d"
      ],
      "stack_out": [
        "0x47657474696e67207b706174687d20746f207b76616c75657d"
      ]
    },
    "182": {
      "op": "log",
      "stack_out": []
    },
    "183": {
      "op": "bytec_0 // 0x6f726d5f",
      "defined_out": [
        "0x6f726d5f"
      ],
      "stack_out": [
        "0x6f726d5f"
      ]
    },
    "184": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ],
      "stack_out": [
        "0x6f726d5f",
        "path#0 (copy)"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "188": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "189": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "191": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "193": {
      "error": "check self.public entry exists",
      "op": "assert // check self.public entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "194": {
      "retsub": true,
      "op": "retsub"
    }
  }
}