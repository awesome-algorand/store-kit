#pragma version 10
#pragma typetrack false

// contracts.lodash.Lodash.__algopy_entrypoint_with_init() -> uint64:
main:
    bytecblock 0x6f726d5f
    // contracts/lodash.py:5
    // class Lodash(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xa8617ccd 0xc0850aee // method "set(string,string)void", method "get(string)string"
    txna ApplicationArgs 0
    match main_set_route@5 main_get_route@6

main_after_if_else@9:
    // contracts/lodash.py:5
    // class Lodash(ARC4Contract):
    pushint 0 // 0
    return

main_get_route@6:
    // contracts/lodash.py:14
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/lodash.py:5
    // class Lodash(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // contracts/lodash.py:14
    // @abimethod()
    callsub get
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return

main_set_route@5:
    // contracts/lodash.py:9
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/lodash.py:5
    // class Lodash(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // contracts/lodash.py:9
    // @abimethod()
    callsub set
    pushint 1 // 1
    return

main_bare_routing@7:
    // contracts/lodash.py:5
    // class Lodash(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@9
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return


// contracts.lodash.Lodash.set(path: bytes, value: bytes) -> void:
set:
    // contracts/lodash.py:9-10
    // @abimethod()
    // def set(self, path: String, value: String) -> None:
    proto 2 0
    // contracts/lodash.py:11
    // log(b"Setting {path} to {value}")
    pushbytes 0x53657474696e67207b706174687d20746f207b76616c75657d
    log
    // contracts/lodash.py:12
    // self.public[path] = value
    bytec_0 // 0x6f726d5f
    frame_dig -2
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// contracts.lodash.Lodash.get(path: bytes) -> bytes:
get:
    // contracts/lodash.py:14-15
    // @abimethod()
    // def get(self, path: String) -> String:
    proto 1 1
    // contracts/lodash.py:16
    // log(b"Getting {path} to {value}")
    pushbytes 0x47657474696e67207b706174687d20746f207b76616c75657d
    log
    // contracts/lodash.py:17
    // assert path in self.public
    bytec_0 // 0x6f726d5f
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert
    // contracts/lodash.py:18
    // return self.public[path]
    box_get
    assert // check self.public entry exists
    retsub
